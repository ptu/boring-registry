name: Minio

on:
  push:
    branches: [ main, minio-tests ]
  pull_request:
    branches: [ main ]

jobs:
  minio:
    name: minio
    runs-on: ubuntu-latest
    env:
      MINIO_ACCESS_KEY: citest
      MINIO_SECRET_KEY: citest
      MINIO_ADMIN_ACCESS_KEY: minioadmin
      MINIO_ADMIN_SECRET_KEY: minioadmin
    # services:
    #   minio:
    #     image: minio/minio
    #     ports:
    #       - 9000:9000
    #     env:
    #       MINIO_ACCESS_KEY: citest
    #       MINIO_SECRET_KEY: citest
    #     volumes:
    #       - ${{ github.workspace }}/data:/data
    #     options: --name=minio --health-cmd "curl http://localhost:9000/minio/health/ready"
    
    steps:
      - name: Setup minio
        run: |
          docker run -d -p 9000:9000 --name minio \
                     -e "MINIO_ACCESS_KEY=${{ env.MINIO_ADMIN_ACCESS_KEY }}" \
                     -e "MINIO_SECRET_KEY=${{ env.MINIO_ADMIN_SECRET_KEY }}" \
                     -v /tmp/data:/data \
                     -v /tmp/config:/root/.minio \
                     minio/minio server /data

          export AWS_ACCESS_KEY_ID=${{ env.MINIO_ADMIN_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ env.MINIO_ADMIN_SECRET_KEY }}
          export AWS_EC2_METADATA_DISABLED=true

          aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://testbucket

      - name: Install minio python module
        run: pip3 install minio
      - name: Setup minio bucket
        run: |
            python3 - <<'EOF'
            from minio import Minio
            from minio.error import InvalidResponseError

            try:
                minio = Minio(
                    'localhost:9000',
                    access_key="${{ env.MINIO_ADMIN_ACCESS_KEY }}",
                    secret_key="${{ env.MINIO_ADMIN_SECRET_KEY }}",
                    secure=False
                )
            except Exception as ex:
                raise

            minio.make_bucket('foo')
            minio.make_bucket('bar')
            print(f'{minio.list_buckets()}')
            EOF